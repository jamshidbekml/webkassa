// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  superadmin
  cashier
  accountant
}

enum PAYMENT_TYPE {
  Cash
  Cashless
}

enum RECEIPT_TYPE {
  sale
  credit
  canceled
}

model Users {
  id           String  @id @default(uuid()) @db.Uuid
  username     String  @unique
  password     String
  firstName    String
  lastName     String
  middleName   String
  satId        Int?
  refreshToken String?
  role         ROLE    @default(cashier)

  branchId  String?    @db.Uuid
  branch    Branches?  @relation(fields: [branchId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  receipts  Receipts[]

  @@map("users")
}

model Branches {
  id             String       @id @default(uuid()) @db.Uuid
  inn            String       @unique
  name           String
  token          String
  password       String
  companyAddress String
  prefix         String
  users          Users[]
  catogries      Categories[]
  products       Products[]
  contracts      Contracts[]
  receipts       Receipts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branches")
}

model Categories {
  id       String     @id @default(uuid()) @db.Uuid
  code     String     @unique
  name     String
  branchId String     @db.Uuid
  branch   Branches   @relation(fields: [branchId], references: [id])
  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Products {
  id             String  @id @default(uuid()) @db.Uuid
  name           String
  barcode        String? @default("")
  packagecode    String
  catalogcode    String
  vat            Int
  amount         Int     @default(0)
  discountAmount Int     @default(0)
  count          Int
  isMarked       Boolean @default(false)
  black          Boolean @default(false)

  branchId         String             @db.Uuid
  branch           Branches           @relation(fields: [branchId], references: [id])
  categoryId       String             @db.Uuid
  category         Categories         @relation(fields: [categoryId], references: [id])
  labels           ProductMarks[]
  contractProducts ContractProducts[]

  @@index([branchId, name, categoryId])
  @@map("products")
}

model ProductMarks {
  id        String   @id @default(uuid()) @db.Uuid
  label     String   @unique
  sold      Boolean  @default(false)
  productId String   @db.Uuid
  product   Products @relation(fields: [productId], references: [id])

  @@map("labels")
}

model Contracts {
  id             String             @id @default(uuid()) @db.Uuid
  clientFullName String
  contractId     String             @unique
  phone          String
  secondPhone    String?
  passportSeries String
  pinfl          String
  branchId       String             @db.Uuid
  previous       Boolean            @default(false)
  branch         Branches           @relation(fields: [branchId], references: [id])
  products       ContractProducts[]
  receipt        Receipts[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contracts")
}

model ContractProducts {
  id          String    @id @default(uuid()) @db.Uuid
  contractId  String    @db.Uuid
  productId   String    @db.Uuid
  count       Int
  amount      Int
  discount    Int?
  other       Int
  barcode     String
  vatPercent  Int
  vat         Int
  name        String
  packageCode String
  classCode   String
  label       String?
  product     Products  @relation(fields: [productId], references: [id], onDelete: NoAction)
  contract    Contracts @relation(fields: [contractId], references: [id], onDelete: Cascade)
}

model Receipts {
  id             String       @id @default(uuid()) @db.Uuid
  terminalId     String
  receiptSeq     String
  fiscalSign     String
  dateTime       String
  qrCodeURL      String
  companyName    String
  companyAddress String
  companyINN     String
  staffName      String
  phoneNumber    String
  clientName     String
  type           RECEIPT_TYPE
  cashierId      String       @db.Uuid
  cashier        Users        @relation(fields: [cashierId], references: [id], onDelete: NoAction)
  contractId     String       @db.Uuid
  contract       Contracts    @relation(fields: [contractId], references: [id], onDelete: NoAction)
  branchId       String       @db.Uuid
  branch         Branches     @relation(fields: [branchId], references: [id], onDelete: Cascade)
  written      Boolean  @default(false)
  received Int
  cash Int
  card Int
  createdAt      DateTime     @default(now())
  updatedAt DateTime @updatedAt

  @@map("receipts")
}

model FetchedDocuments {
  id     String @id @default(uuid()) @db.Uuid
  doc_id String @unique

  @@map("documents")
}
