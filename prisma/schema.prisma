// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  superadmin
  cashier
  accountant
} 

enum PAYMENT_TYPE {
  cash
  card
  cashless
}

model Users {
  id String @id @default(uuid()) @db.Uuid
  username     String  @unique
  password     String
  name         String
  satId String?
  refreshToken String?
  role         ROLE    @default(cashier)

  branchId String? @db.Uuid 
  branch Branches? @relation(fields: [branchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Branches {
  id String @id @default(uuid()) @db.Uuid
  inn String @unique 
  name String 
  password String
  users Users[]
  catogries Categories[]
  products Products[]
  contracts Contracts[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("branches")
}

model Categories {
  id String @id @default(uuid()) @db.Uuid
  code String @unique
  name String
  branchId String @db.Uuid
  branch Branches @relation(fields: [branchId], references: [id])
  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("categories")
}

model Products {
  id String @id @default(uuid()) @db.Uuid
  name String
  barcode String
  packagecode String
  catalogcode String
  vat Decimal
  amount Int @default(0)
  discountAmount Int @default(0)
  count Int
  isMarked Boolean @default(false)

  branchId String @db.Uuid
  branch Branches @relation(fields: [branchId], references: [id])
  categoryId String @db.Uuid
  category Categories @relation(fields: [categoryId], references: [id])
  labels ProductMarks[]
  receipts Receipts[]
  contractProducts ContractProducts[]

  @@map("products")
  @@index([branchId, name, categoryId])
}

model ProductMarks {
  id String @id @default(uuid()) @db.Uuid
  label String @unique
  sold Boolean @default(false)
  productId String @db.Uuid
  product Products @relation(fields: [productId], references: [id])

  @@map("labels")
}

model Contracts {
  id String @id @default(uuid()) @db.Uuid
  saleId String? @unique
  contractId String @unique
  phone String
  passportSeries String
  pinfl String
  branchId String @db.Uuid
  branch Branches @relation(fields: [branchId], references: [id])
  products ContractProducts[]
  receipts Receipts[]

  createdAt DateTime @default(now())  
  updatedAt DateTime @updatedAt
  @@map("contracts")
}

model ContractProducts {
  id String @id @default(uuid()) @db.Uuid
  productId String @db.Uuid
  count Int
  amount Int
  discountAmount Int
  product Products @relation(fields: [productId], references: [id])
  contractId String @db.Uuid
  contract Contracts @relation(fields: [contractId], references: [id], onDelete: Cascade)
  labels ContractProductLabels[]
}

model ContractProductLabels {
  id String @id @default(uuid()) @db.Uuid
  label String
  contractProductId String @db.Uuid
  contractProduct ContractProducts @relation(fields: [contractProductId], references: [id], onDelete: Cascade)
}

model Receipts {
  id String @id @default(uuid()) @db.Uuid
  paymentType PAYMENT_TYPE
  saleId String
  amount Int
  productId String @db.Uuid
  product Products @relation(fields: [productId], references: [id])
  label String?
  contractId String @db.Uuid
  contract Contracts @relation(fields: [contractId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("receipts")
}

model FetchedDocuments {
  id String @id @default(uuid()) @db.Uuid
  doc_id String @unique

  @@map("documents")
}
